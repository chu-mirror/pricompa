# Pricompa (priconne companion)

_Pricompa_ is an auxiliary tool for game _priconne_, the major functionality
is an auto clicker but designed perticularly for game playing.  More
funcationalities, like time-line recorder or status monitor, are planned,
but the developer is not sure when to do these stuffs.

This project uses C and CMake, as a Win32 application usually is.

@[CMakeLists.txt@]
cmake_minimum_required(VERSION 3.2)
project(Pricompa LANGUAGES C)
add_executable(pricompa pricompa.c)
@

@[pricompa.c@]
@{includes@}
@{data@}
@{prototypes@}
@{functions@}
@


## Main loop and Basic style

Main loop is fairly straight forward.

@[functions@]
int
main(int argn, char *argv[])
{
	@{initialize environment@}
	@{receive and dispatch events@}
}
@

The program is built upon Win32 API, but do not use utf-16.

@[includes@]
#undef _UNICODE
#include <windows.h>
@

@[receive and dispatch events@]
{
	MSG msg;
	BOOL bRet;
	while ((bRet = GetMessage(&msg, NULL, 0, 0)) > 0) {
		switch (msg.message) {
			@{event handlers@}
		}
	}
	if (bRet == -1) { /* something wrong */
		@{handle error in GetMessage@}
	}
}
@

### Error handling

Since I do not want to handle error messages in Windows way, nor the management
of memory, so prepare a buffer to transfer error messages.
@[data@]
#define MAXMSG 2048
char errmsg[2048];
@

@[initialize environment@]
errmsg[MAXMSG-1] = '\0';
@

And the corresponding procedures for saving error massage to _errmsg_.
@[functions@]
void
get_sys_errmsg()
{
	DWORD eno, msglen;
	LPTSTR pmsg;
	
	eno = GetLastError();
	msglen = FormatMessage(
		FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
		NULL, eno,
		MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL),
		(LPTSTR) &pmsg, 0, NULL);
	if (msglen >= MAXMSG) {
		info("fatal error: error massage is too long");
		exit(1);
	} else if (msglen > 0) {
		sprintf(errmsg, "%s", (char *)pmsg);
	} else {
		sprintf(errmsg, "the error number: %d", eno);
	}
}

void
get_nonsys_errmsg(const char *msg)
{
	if (strlen(msg) >= MAXMSG) {
		info("fatal error: error massage is too long");
		exit(1);
	} else {
		sprintf(errmsg, msg);
	}
}
@

@[prototypes@]
void get_sys_errmsg(void);
void get_nonsys_errmsg(const char *);
@

The error handling is also straight forward.
@[handle error in GetMessage@]
get_sys_errmsg();
@{show error message@}
exit(1);
@

### Output

The program is a console application, users can suppose information prompted by console.
I simply use standard C library here.

@[includes@]
#include <stdio.h>
@

@[functions@]
void
info(const char *msg)
{
	printf("%s\n", msg);
}
@

@[prototypes@]
void info(const char *);
@

@[show error message@]
info(errmsg);
@

### Interact with Pricompa

Use hotkeys to interact with _Pricompa_.

@[event handlers@]
case WM_HOTKEY:
	switch (msg.wParam) {
	@{hotkey handlers@}
	}
break;
@

Hotkeys' modifier is fixed to CTRL, since these hotkeys might affect other
application, it's recommanded to execute _pricompa_ only when you need it,
and close it right away when you finished CB.
@[data@]
#define MOD (MOD_CONTROL | MOD_NOREPEAT)
@

The custom of exception handling is consistent through out the program.
	0: succeed
	1: known error, save massage to errmsg
	2: unknown error

@[functions@]
int
register_hotkey(char key, int id)
{
	if (RegisterHotKey(NULL, id, MOD, (key-'A') + 0x41)) {
		return 0;
	} else {
		get_sys_errmsg();
		return 1;
	}
}
@

@[prototypes@]
int register_hotkey(char, int);
@

The program can quit elegently with CTRL+Q.

The hotkeys:
	CTRL+Q	quit
@[data@]
#define PRICOMPA_QUIT 0
@

@[initialize environment@]
if (register_hotkey('Q', PRICOMPA_QUIT)) {
	info(errmsg);
	info("in registering CTRL+Q");
	exit(1);
}
@

@[hotkey handlers@]
case PRICOMPA_QUIT:
	exit(0);
break;
@

## Interact with Game

Clicking are supposed to be the only officially supported way we send inputs to game,
but we need mouse inputs coming from hardware driver level.  _Pricompa_ uses
library [interception](https://github.com/oblitum/Interception)
to interact with game.  This library allows a process functioning as a filter
of device inputs.

@[CMakeLists.txt@]
target_link_libraries(pricompa
	@{libraries@}
)
@

@[includes@]
#include "interception.h"
@

All source and library files are placed under the same directory.
@[libraries@]
PRIVATE ${CMAKE_SOURCE_DIR}/interception.lib
@

To use this library, we need to declare some variables at first.
@[data@]
InterceptionContext context = NULL;
InterceptionDevice device;
InterceptionStroke stroke;
@

### Clicks

Because we use this library to send mouse input rather than to filter it, we should
construct input events ourselves.
@[data@]
InterceptionMouseStroke left_down, left_up;
@

@[initialize environment@]
left_down.state = INTERCEPTION_MOUSE_LEFT_BUTTON_DOWN;
left_up.state = INTERCEPTION_MOUSE_LEFT_BUTTON_UP;
@

This function does not guarantee success, nor examine the environment.
It's time-critical, and supposed to be thread-safe.
@[functions@]
int
click_once()
{
	int left = 2;
	left -= interception_send(context, INTERCEPTION_MOUSE(1), (InterceptionStroke *)&left_down, 1);
	Sleep(1);
	left -= interception_send(context, INTERCEPTION_MOUSE(1), (InterceptionStroke *)&left_up, 1);
	return left;
}
@

@[prototypes@]
int click_once(void);
@

### Game's UI

To do clicking, we need a basic action of clicking once at purposed positions,
since the game has a fixed layout of UI elements, we can simply record these positions in an array.
@[data@]
typedef struct position {
	int x;
	int y;
} position;

#define MAXPOS 200
position positions[MAXPOS];
@

The following is a list of UI elements in game.
@[data@]
enum battle{
	UB_1 = 1, UB_2, UB_3, UB_4, UB_5,
	SPEED = 11,
	AUTO = 21,
	PAUSE = 31
};
@

@[initialize environment@]
positions[UB_1].x = 63; positions[UB_1].y = 211;
positions[UB_2].x = 97; positions[UB_2].y = 211;
positions[UB_3].x = 128; positions[UB_3].y = 211;
positions[UB_4].x = 160; positions[UB_4].y = 211;
positions[UB_5].x = 193; positions[UB_5].y = 211;
positions[SPEED].x = 242; positions[SPEED].y = 238;
positions[AUTO].x = 242; positions[AUTO].y = 198;
positions[PAUSE].x = 242; positions[PAUSE].y = 13;
@

### Game's Window

If we want to tell where to click, we must have some knowledge of game's window.

The first step is finding out the handle of window, the function find the window's handle
and save it to a global variable.
@[data@]
HWND game_window;
WINDOWINFO game_window_info;
@

@[initialize environment@]
game_window_info.cbSize = sizeof(WINDOWINFO);
@

@[functions@]
int
valid_window()
{
	return GetWindowInfo(game_window, &game_window_info);
}

int
get_game_window()
{
	if (valid_window()) {
		return 0; /* stop finding if it already exsit */
	}

	@{find game window@}

	if (valid_window()) {
		return 0;
	} else {
		get_nonsys_errmsg("can not find game window");
		return 1;
	}
}
@

@[prototypes@]
int valid_window(void);
int get_game_window(void);
@

Set the corresponding global variables.
@[functions@]
BOOL
if_priconne(HWND hwnd, LPARAM lParam)
{
	static CHAR title[100];
	GetWindowTextA(hwnd, title, 100);
	if (!strcmp(title, "PrincessConnectReDive")) {
		game_window = hwnd;
		GetWindowInfo(game_window, &game_window_info);
		return FALSE;
	} else {
		return TRUE;
	}
}
@

@[prototypes@]
BOOL CALLBACK if_priconne(_In_ HWND, _In_ LPARAM);
@

@[includes@]
#include <string.h>
@

@[find game window@]
EnumWindows((WNDENUMPROC) if_priconne, NULL);
@

### Definition of Positions

Before we do mouse's moving, we should complete the definition of positions.
A position (x, y), 0 <= x <= 255, 0 <= y <= 255, game's client area's left-top corner is at (0, 0),
right-bottom corner is at (255, 255).

@[functions@]
int
pos_to_point(int pos_id, PPOINT pp)
{
	if (!valid_window()) {
		get_nonsys_errmsg("can not find game window");
		return 1;
	}
	{
		LONG l = game_window_info.rcClient.left;
		LONG r = game_window_info.rcClient.right;
		LONG t = game_window_info.rcClient.top;
		LONG b = game_window_info.rcClient.bottom;
		int x = positions[pos_id].x;
		int y = positions[pos_id].y;

		pp->x = (x / 256.0) * (r - l + 1) + l;
		pp->y = (y / 256.0) * (b - t + 1) + t;
	}
	return 0;
}
@

@[prototypes@]
int pos_to_point(int, PPOINT);
@

Because this transition is time-consuming, I prefer initializing all points
before using them.
@[data@]
POINT points[MAXPOS];
@

@[functions@]
int
get_transitions()
{
	int i;

	for (i = 0; i < MAXPOS; i++) {
		if (positions[i].x && positions[i].y) {
			if (pos_to_point(i, &points[i])) return 1;
		}
	}
	return 0;
}
@

@[prototypes@]
int get_transitions(void);
@

### Move Mouse

To click at purposed positions, we should also deal with the moving.
@[data@]
InterceptionMouseStroke move;
@

@[initialize environment@]
move.flags = INTERCEPTION_MOUSE_MOVE_ABSOLUTE;
@

@[functions@]
int
move_to(int pos_id)
{
	move.x = points[pos_id].x * (65536.0/GetSystemMetrics(SM_CXSCREEN));
	move.y = points[pos_id].y * (65536.0/GetSystemMetrics(SM_CYSCREEN));
	return interception_send(context, INTERCEPTION_MOUSE(1), (InterceptionStroke *)&move, 1);
}
@

@[prototypes@]
int move_to(int);
@

We now be able to finish this topic.
@[functions@]
int
click_once_at(int pos_id)
{
	move_to(pos_id);
	return click_once();
}
@

@[prototypes@]
int click_once_at(int);
@

## Auto Clicker

The hotkeys:
	CTRL+A	start auto clicker
@[data@]
#define AUTOCLICKER_START 1
@

@[initialize environment@]
if (register_hotkey('A', AUTOCLICKER_START)) {
	info(errmsg);
	info("in registering CTRL+A");
	exit(1);
}
@

The auto clicker is highly time-critical.
@[initialize environment@]
SetPriorityClass(GetCurrentProcess(), HIGH_PRIORITY_CLASS);
@

@[hotkey handlers@]
case AUTOCLICKER_START:
	if (context != NULL) {
		info("fatal error: context is already created");
		exit(1);
	}
	info("auto clicker start");
	@{prepare game window@}
	context = interception_create_context();
	@{start auto clicker@}
	interception_destroy_context(context);
	context = NULL;
	info("auto clicker stop");
break;
@

Ignore this event if the game has not been prepared.
@[prepare game window@]
if (get_game_window()) {
	info(errmsg);
	continue;
}
get_transitions();
@

### Perform auto clicks

The auto clicks are performed by a thread.
@[functions@]
DWORD
auto_click(LPVOID param)
{
	static DWORD delay = 15;
	while (1) {
		click_once();
		Sleep(delay);
	}
	return 0;
}
@

@[prototypes@]
DWORD auto_click(LPVOID);
@

The thread is created in initialization, controled by suspending and resuming.
@[data@]
HANDLE auto_clicker;
@

@[initialize environment@]
auto_clicker = CreateThread(NULL, 0,
	auto_click, NULL,
	CREATE_SUSPENDED, NULL);
@

### The design of auto clicker

The logic of auto clicker is very simple, it simply block other keys when in clicking,
which means you can not spam two UBs simultaneously.
@[data@]
int in_clicking;
int ub_in_spamming;
@

The key bindings are done by an array.
The default bindings are:
	UB1:	A
	UB2:	S
	UB3:	D
	UB4:	F
	UB5:	G
	SPEED:	SPACE
	AUTO:	C
	PAUSE:	B
	QUIT:	Q

@[data@]
enum autoclicker_event {
	UB1 = 1, UB2, UB3, UB4, UB5,
	SWITCH_SPEED, CHANGE_AUTO,
	DO_PAUSE, QUIT
};
int autoclicker_keymap[256] = {
	[0x10] = QUIT,
	[0x1e] = UB1,
	[0x1f] = UB2,
	[0x20] = UB3,
	[0x21] = UB4,
	[0x22] = UB5,
	[0x2e] = CHANGE_AUTO,
	[0x30] = DO_PAUSE,
	[0x39] = SWITCH_SPEED,
};
int autoclicker_event_pos_map[] = { 0,
	UB_1, UB_2, UB_3, UB_4, UB_5,
	SPEED, AUTO, PAUSE
};
@

This is the hardest part of auto clicker, but this is regarded as a whole part that
follow the coding custom of library interception.  So I choose not to divide it to
smaller parts.
@[start auto clicker@]
interception_set_filter(context, interception_is_keyboard,
	INTERCEPTION_FILTER_KEY_DOWN | INTERCEPTION_FILTER_KEY_UP);
interception_set_filter(context, interception_is_mouse,
	INTERCEPTION_FILTER_MOUSE_ALL);
while (interception_receive(context, device = interception_wait(context), &stroke, 1) > 0) {
	if (interception_is_mouse(device)) {
		/* intercept all mouse inputs */
	}
	if (interception_is_keyboard(device)) {
		InterceptionKeyStroke *pk = (InterceptionKeyStroke *)&stroke;
		int event = autoclicker_keymap[pk->code];

		interception_send(context, device, &stroke, 1);
		if (in_clicking) {
			if (event == ub_in_spamming && pk->state == INTERCEPTION_KEY_UP) {
				SuspendThread(auto_clicker);
				in_clicking = 0;
			}
			continue;
		}
		if (event >= UB1 && event <= UB5 && pk->state == INTERCEPTION_KEY_DOWN) {
			move_to(autoclicker_event_pos_map[event]);
			ResumeThread(auto_clicker);
			in_clicking = 1;
			ub_in_spamming = event;
		} else if ((event == CHANGE_AUTO || event == DO_PAUSE || event == SWITCH_SPEED)
				&& pk->state == INTERCEPTION_KEY_UP) {
			click_once_at(autoclicker_event_pos_map[event]);
		} else if (event == QUIT && pk->state == INTERCEPTION_KEY_UP) {
			break;
		}
	}
}
@

## Slacc Mode

Beside the auto clicker above, another type of auto clicking is also convenient(maybe more
valuable for players prefering semi-auto).  In this mode, you can toggle auto clicking on/off,
multiple spamming is possible.

The hotkeys:
	CTRL+S	start slacc mode
@[data@]
#define SLACC_START 2
@

@[initialize environment@]
if (register_hotkey('S', SLACC_START)) {
	info(errmsg);
	info("in registering CTRL+S");
	exit(1);
}
@

Slacc mode uses a similar design.
@[hotkey handlers@]
case SLACC_START:
	if (context != NULL) {
		info("fatal error: context is already created");
		exit(1);
	}
	info("start slacc mode");
	@{prepare game window@}
	context = interception_create_context();
	@{start slacc mode@}
	interception_destroy_context(context);
	context = NULL;
	info("stop slacc mode");
break;
@

### Perform auto clicks in Slacc Mode

Unlike the design of previous auto clicker, the one used here has a lower frequency.
Because it scans through a list of UB states, clicks and moves at most five times each loop.
But it's enough for a slaccer, I think.

@[functions@]
DWORD
auto_click_slacc(LPVOID param)
{
	static DWORD delay = 15;
	while (1) {
		@{scan through the list and click@}
		Sleep(delay);
	}
	return 0;
}
@

@[prototypes@]
DWORD auto_click_slacc(LPVOID);
@

The thread is also created in initialization, controled by suspending and resuming.
@[data@]
HANDLE auto_clicker_slacc;
@

@[initialize environment@]
auto_clicker_slacc = CreateThread(NULL, 0,
	auto_click_slacc, NULL,
	CREATE_SUSPENDED, NULL);
@

### The design of slacc mode

The events and key bindings are as same as before.  The different is that
we should record all UB states now.
@[data@]
int ub_states[UB5+1];
int in_slacc_clicking;
@

@[scan through the list and click@]
{
	int i;
	for (i = UB1; i <= UB5; i++) {
		if (ub_states[i]) {
			click_once_at(autoclicker_event_pos_map[i]);
			Sleep(15);
		}
	}
}
@

@[start slacc mode@]
interception_set_filter(context, interception_is_keyboard, INTERCEPTION_FILTER_KEY_DOWN);
interception_set_filter(context, interception_is_mouse, INTERCEPTION_FILTER_MOUSE_ALL);
while (interception_receive(context, device = interception_wait(context), &stroke, 1) > 0) {
	if (interception_is_mouse(device)) {
		/* intercept all mouse inputs */
	}
	if (interception_is_keyboard(device)) {
		InterceptionKeyStroke *pk = (InterceptionKeyStroke *)&stroke;
		int event = autoclicker_keymap[pk->code];

		interception_send(context, device, &stroke, 1);
		if (event >= UB1 && event <= UB5) {
			ub_states[event] = !ub_states[event];
			@{suspend or resume thread@}
		} else if (event == CHANGE_AUTO || event == DO_PAUSE || event == SWITCH_SPEED) {
			click_once_at(autoclicker_event_pos_map[event]);
		} else if (event == QUIT) {
			SuspendThread(auto_clicker_slacc);
			break;
		}
	}
}
@

@[suspend or resume thread@]
{
	int i, any_running = 0;
	for (i = UB1; i <= UB5; i++) {
		any_running |= ub_states[i];
	}
	if (any_running && !in_slacc_clicking) {
		ResumeThread(auto_clicker_slacc);
		in_slacc_clicking = 1;
	} else if (!any_running && in_slacc_clicking) {
		SuspendThread(auto_clicker_slacc);
		in_slacc_clicking = 0;
	}
}
@


